{"version":3,"file":"main.2a3351972108acd88a5a.bundle.js","sources":["webpack:///./src/@typings/types.ts"],"sourcesContent":["import React from 'react';\r\nimport {ReactPaginateProps} from \"react-paginate\";\r\nimport FieldModel from \"../store/models/field\";\r\nimport Header from \"../store/models/header\";\r\nimport {XOR} from \"./utils\";\r\n\r\nexport interface IHeaderPropObject {\r\n    name: string,\r\n    property?: string,\r\n    sortable?: boolean,\r\n    searchable?: boolean,\r\n    editable?: boolean,\r\n\r\n    render?(name: string): string | React.ReactElement\r\n}\r\n\r\nexport interface IFieldPropObject {\r\n    property: string,\r\n\r\n    render?(value: any, object: IRecord): string | React.ReactElement\r\n}\r\n\r\nexport type IHeaderProp = IHeaderPropObject | string\r\nexport type IFieldsProp = IFieldPropObject | string\r\n\r\nexport interface IPaginateProps extends Partial<ReactPaginateProps> {\r\n    pageCount?: number,\r\n    currentPage?: number,\r\n    pageSize: number\r\n}\r\n\r\ninterface ITableBase {\r\n    search?: boolean,\r\n    sorting?: keyof typeof SortingModes | false,\r\n    showSortingPanel?: boolean,\r\n    fields: IFieldsProp[],\r\n    headers?: IHeaderProp[],\r\n    indexField: string,\r\n    editable?: boolean,\r\n    onEdit?: (newValue: string | null, propertyName: string, record: IRecord) => void,\r\n    pagination?: IPaginateProps | false,\r\n    onSelect?: (records: IRecord[]) => void,\r\n    selectMode?: keyof typeof SelectModes | false,\r\n    loadingComponent?: (isLoading?: boolean) => React.ReactElement\r\n}\r\n\r\ninterface ITableWithUrl {\r\n    url: string,\r\n    fetchSuccess?: (res: any) => []\r\n}\r\n\r\ninterface ITableWithData {\r\n    data: IRecord[]\r\n}\r\n\r\nexport type ITableProps = XOR<ITableWithUrl, ITableWithData> & ITableBase\r\n\r\nexport enum SortingModes {\r\n    compound = 'compound',\r\n    simple = 'simple'\r\n}\r\n\r\nexport enum SortingValues {\r\n    ASC = 'asc',\r\n    DESC = 'desc'\r\n}\r\n\r\nexport enum SelectModes {\r\n    single = 'single',\r\n    multiple = 'multiple'\r\n}\r\n\r\nexport interface ISortingOptions {\r\n    order: SortingValues,\r\n    headerName: string\r\n}\r\n\r\nexport type IFilterFunction = (data: IRecord[]) => IRecord[];\r\nexport type IPaginateFunction = (data: IRecord[]) => IDisplayData;\r\n\r\nexport type IRecord = object;\r\n\r\nexport interface IDisplayData {\r\n    data: IRecord[],\r\n    pageCount: number\r\n}\r\n\r\nexport interface IStore {\r\n    props: ITableProps,\r\n    _loadedData: IRecord[] | undefined,\r\n    error: undefined | string,\r\n    headers?: Header[],\r\n    fields: FieldModel[],\r\n    displayData: IDisplayData,\r\n    inProgress: boolean,\r\n    isLoading: boolean,\r\n    loadByUrl: () => void,\r\n    selectedItems: { [x: string]: IRecord; },\r\n    sorting: { [property: string]: ISortingOptions },\r\n    removeFromSorting: (property: string) => void,\r\n    select: (row: IRecord) => void,\r\n    sort: (header: Header) => void,\r\n    currentPage: number,\r\n    searchQuery: string\r\n    search: (query: string) => void,\r\n    filterHandlers: () => IFilterFunction[],\r\n    editCell: (value: string | null, record: IRecord, field: FieldModel) => void,\r\n    isEditableField: (Field: FieldModel) => boolean,\r\n    searchFilter: IFilterFunction,\r\n    sortFilter: IFilterFunction,\r\n    paginateFilter: IPaginateFunction,\r\n}\r\n\r\n"],"mappings":"AAyDA","sourceRoot":""}