{"version":3,"file":"main.c9b091296ed56b9840a1.bundle.js","sources":["webpack:///./src/@typings/types.ts"],"sourcesContent":["import React from 'react';\nimport {ReactPaginateProps} from \"react-paginate\";\nimport FieldModel from \"../store/models/field\";\nimport Header from \"../store/models/header\";\nimport {XOR} from \"./utils\";\nimport {MoveFocusKeyCodes} from \"../helper/editable\";\n\nexport interface IHeaderPropObject {\n    name: string,\n    property?: string,\n    sortable?: boolean,\n    searchable?: boolean,\n    editable?: boolean,\n\n    render?(name: string): string | React.ReactElement\n}\n\nexport interface IFieldPropObject {\n    property: string,\n\n    render?(value: any, object: IRecord): string | React.ReactElement\n}\n\nexport type IHeaderProp = IHeaderPropObject | string\nexport type IFieldsProp = IFieldPropObject | string\n\nexport interface IPaginateProps extends Partial<ReactPaginateProps> {\n    pageCount?: number,\n    currentPage?: number,\n    pageSize: number\n}\n\ninterface ITableBase {\n    search?: boolean,\n    sorting?: keyof typeof SortingModes | false,\n    showSortingPanel?: boolean,\n    fields: IFieldsProp[],\n    headers?: IHeaderProp[],\n    indexField: string,\n    editable?: boolean,\n    onEdit?: (newValue: string | null, propertyName: string, record: IRecord) => void,\n    pagination?: IPaginateProps | false,\n    onSelect?: (records: IRecord[]) => void,\n    selectMode?: keyof typeof SelectModes | false,\n    loadingComponent?: (isLoading?: boolean) => React.ReactElement\n}\n\ninterface ITableWithUrl {\n    url: string,\n    fetchSuccess?: (res: any) => []\n}\n\ninterface ITableWithData {\n    data: IRecord[]\n}\n\nexport type ITableProps = XOR<ITableWithUrl, ITableWithData> & ITableBase\n\nexport enum SortingModes {\n    compound = 'compound',\n    simple = 'simple'\n}\n\nexport enum SortingValues {\n    ASC = 'asc',\n    DESC = 'desc'\n}\n\nexport enum SelectModes {\n    single = 'single',\n    multiple = 'multiple'\n}\n\nexport interface ISortingOptions {\n    order: SortingValues,\n    headerName: string\n}\n\nexport type IFilterFunction = (data: IRecord[]) => IRecord[];\nexport type IPaginateFunction = (data: IRecord[]) => IDisplayData;\n\nexport type IRecord = object;\n\nexport interface IDisplayData {\n    data: IRecord[],\n    pageCount: number\n}\n\nexport type MoveFocusKeyCodesType = typeof MoveFocusKeyCodes[number] ;\n\nexport interface IStore {\n    props: ITableProps,\n    _loadedData: IRecord[] | undefined,\n    error: undefined | string,\n    headers?: Header[],\n    fields: FieldModel[],\n    displayData: IDisplayData,\n    inProgress: boolean,\n    isLoading: boolean,\n    loadByUrl: () => void,\n    selectedItems: { [x: string]: IRecord; },\n    sorting: { [property: string]: ISortingOptions },\n    removeFromSorting: (property: string) => void,\n    select: (row: IRecord) => void,\n    sort: (header: Header) => void,\n    currentPage: number,\n    searchQuery: string\n    search: (query: string) => void,\n    filterHandlers: () => IFilterFunction[],\n    editCell: (value: string | null, record: IRecord, field: FieldModel) => void,\n    isEditableField: (Field: FieldModel) => boolean,\n    searchFilter: IFilterFunction,\n    sortFilter: IFilterFunction,\n    paginateFilter: IPaginateFunction,\n    setFocus: (cellIndex: number, rowIndex: number) => void,\n    focusCell: {cellIndex: number, rowIndex: number} | undefined,\n    moveFocus: (keyCode: MoveFocusKeyCodesType) => void\n}\n\n"],"mappings":"AA0DA","sourceRoot":""}